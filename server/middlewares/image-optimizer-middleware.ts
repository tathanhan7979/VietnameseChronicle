import { Request, Response, NextFunction } from 'express';
import { optimizeImage } from '../utils/image-optimizer';
import { log } from '../vite';

/**
 * Middleware t·ªëi ∆∞u h√≥a h√¨nh ·∫£nh sau khi ƒë√£ t·∫£i l√™n
 * S·ª≠ d·ª•ng sau khi multer ƒë√£ x·ª≠ l√Ω upload
 */
export async function optimizeUploadedImage(
  req: Request, 
  res: Response, 
  next: NextFunction
) {
  try {
    // Ki·ªÉm tra xem c√≥ file ƒë∆∞·ª£c upload kh√¥ng
    if (!req.file) {
      return next();
    }

    const originalSize = req.file.size;
    log(`üñºÔ∏è T·ªëi ∆∞u h√≥a ·∫£nh: ${req.file.originalname} (${formatBytes(originalSize)})`, 'image-optimizer');

    // Th·ª±c hi·ªán t·ªëi ∆∞u h√≥a ·∫£nh
    const optimizedPath = await optimizeImage(req.file.path, {
      format: 'webp',  // Chuy·ªÉn sang webp ƒë·ªÉ n√©n t·ªët h∆°n
      quality: 80,     // Ch·∫•t l∆∞·ª£ng 80% th∆∞·ªùng l√† s·ª± c√¢n b·∫±ng t·ªët
    });
    
    // C·∫≠p nh·∫≠t th√¥ng tin file trong request
    const originalPath = req.file.path;
    const optimizedFilename = optimizedPath.split('/').pop() || req.file.filename;
    
    req.file.filename = optimizedFilename;
    req.file.path = optimizedPath;
    
    // T√≠nh to√°n t·ª∑ l·ªá n√©n
    try {
      const fs = await import('fs');
      const stats = await fs.promises.stat(optimizedPath);
      const optimizedSize = stats.size;
      const compressionRatio = (originalSize - optimizedSize) / originalSize * 100;
      
      log(
        `‚úÖ T·ªëi ∆∞u h√≥a ho√†n t·∫•t: ${formatBytes(optimizedSize)} (gi·∫£m ${compressionRatio.toFixed(1)}%)`,
        'image-optimizer'
      );
    } catch (error) {
      log(`‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh to√°n th√¥ng tin file t·ªëi ∆∞u`, 'image-optimizer');
    }
    
    next();
  } catch (error) {
    // N·∫øu c√≥ l·ªói trong qu√° tr√¨nh t·ªëi ∆∞u, v·∫´n ti·∫øp t·ª•c v·ªõi file g·ªëc
    log(`‚ùå L·ªói khi t·ªëi ∆∞u ·∫£nh: ${(error as Error).message}`, 'image-optimizer');
    next();
  }
}

/**
 * Middleware t·ªëi ∆∞u h√≥a nhi·ªÅu h√¨nh ·∫£nh sau khi ƒë√£ t·∫£i l√™n (array c·ªßa multer)
 */
export async function optimizeUploadedImages(
  req: Request, 
  res: Response, 
  next: NextFunction
) {
  try {
    // Ki·ªÉm tra xem c√≥ c√°c file ƒë∆∞·ª£c upload kh√¥ng
    if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {
      return next();
    }

    // X·ª≠ l√Ω t·ªëi ∆∞u t·ª´ng file m·ªôt
    const optimizationPromises = req.files.map(async (file: Express.Multer.File) => {
      const originalSize = file.size;
      log(`üñºÔ∏è T·ªëi ∆∞u h√≥a ·∫£nh: ${file.originalname} (${formatBytes(originalSize)})`, 'image-optimizer');

      try {
        // Th·ª±c hi·ªán t·ªëi ∆∞u h√≥a ·∫£nh
        const optimizedPath = await optimizeImage(file.path, {
          format: 'webp',
          quality: 80,
        });
        
        // C·∫≠p nh·∫≠t th√¥ng tin file
        const optimizedFilename = optimizedPath.split('/').pop() || file.filename;
        file.filename = optimizedFilename;
        file.path = optimizedPath;
        
        // T√≠nh to√°n t·ª∑ l·ªá n√©n
        const fs = await import('fs');
        const stats = await fs.promises.stat(optimizedPath);
        const optimizedSize = stats.size;
        const compressionRatio = (originalSize - optimizedSize) / originalSize * 100;
        
        log(
          `‚úÖ T·ªëi ∆∞u h√≥a ho√†n t·∫•t: ${file.originalname} - ${formatBytes(optimizedSize)} (gi·∫£m ${compressionRatio.toFixed(1)}%)`,
          'image-optimizer'
        );
      } catch (error) {
        log(`‚ùå L·ªói khi t·ªëi ∆∞u ·∫£nh ${file.originalname}: ${(error as Error).message}`, 'image-optimizer');
      }
    });
    
    // ƒê·ª£i t·∫•t c·∫£ c√°c t√°c v·ª• t·ªëi ∆∞u ho√†n t·∫•t
    await Promise.all(optimizationPromises);
    
    next();
  } catch (error) {
    // N·∫øu c√≥ l·ªói trong qu√° tr√¨nh t·ªëi ∆∞u, v·∫´n ti·∫øp t·ª•c v·ªõi file g·ªëc
    log(`‚ùå L·ªói khi t·ªëi ∆∞u nhi·ªÅu ·∫£nh: ${(error as Error).message}`, 'image-optimizer');
    next();
  }
}

/**
 * ƒê·ªãnh d·∫°ng bytes th√†nh chu·ªói d·ªÖ ƒë·ªçc
 */
function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;
}