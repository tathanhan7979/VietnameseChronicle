import path from 'path';
import { optimizeDirectory } from '../utils/image-optimizer';

/**
 * Script t·ªëi ∆∞u h√≥a t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c uploads
 * S·ª≠ d·ª•ng: ts-node server/scripts/optimize-images.ts
 */
async function main() {
  // Th∆∞ m·ª•c g·ªëc ch·ª©a ·∫£nh
  const uploadsDir = path.join(process.cwd(), 'uploads');
  
  console.log('====== B·∫ÆT ƒê·∫¶U T·ªêI ∆ØU H√ìA H√åNH ·∫¢NH ======');
  console.log('Th∆∞ m·ª•c g·ªëc:', uploadsDir);
  console.log('==========================================');
  
  // Danh s√°ch c√°c th∆∞ m·ª•c con c·∫ßn t·ªëi ∆∞u
  const subDirectories = [
    'events',     // ·∫¢nh s·ª± ki·ªán
    'figures',    // ·∫¢nh nh√¢n v·∫≠t l·ªãch s·ª≠ 
    'sites',      // ·∫¢nh ƒë·ªãa ƒëi·ªÉm l·ªãch s·ª≠
    'backgrounds', // ·∫¢nh n·ªÅn
    'news',       // ·∫¢nh tin t·ª©c
    'contributors', // ·∫¢nh ng∆∞·ªùi ƒë√≥ng g√≥p
    'images'      // ·∫¢nh kh√°c
  ];
  
  let totalProcessed = 0;
  let totalFailed = 0;
  let totalSavedSpace = 0;
  
  // L·∫∑p qua t·ª´ng th∆∞ m·ª•c con v√† t·ªëi ∆∞u
  for (const dir of subDirectories) {
    const dirPath = path.join(uploadsDir, dir);
    console.log(`\nüîç ƒêang t·ªëi ∆∞u h√≥a th∆∞ m·ª•c: ${dir}`);
    
    // T·ªëi ∆∞u h√¨nh ·∫£nh trong th∆∞ m·ª•c
    const result = await optimizeDirectory(dirPath, {
      format: 'webp', // Chuy·ªÉn ƒë·ªïi sang WebP ƒë·ªÉ n√©n t·ªët h∆°n
      quality: 75,   // Ch·∫•t l∆∞·ª£ng v·ª´a ph·∫£i (75%)
      recursive: true, // X·ª≠ l√Ω c·∫£ th∆∞ m·ª•c con
      // Kh√¥ng resize ƒë·ªÉ gi·ªØ nguy√™n k√≠ch th∆∞·ªõc ·∫£nh g·ªëc
    });
    
    console.log(`\nüìä K·∫øt qu·∫£ th∆∞ m·ª•c ${dir}:`);
    console.log(`  - S·ªë ·∫£nh ƒë√£ x·ª≠ l√Ω: ${result.processed}`);
    console.log(`  - S·ªë ·∫£nh th·∫•t b·∫°i: ${result.failed}`);
    console.log(`  - Kh√¥ng gian ti·∫øt ki·ªám: ${formatBytes(result.savedSpace)}`);
    
    totalProcessed += result.processed;
    totalFailed += result.failed;
    totalSavedSpace += result.savedSpace;
  }
  
  console.log('\n====== K·∫æT QU·∫¢ T·ªîNG QUAN ======');
  console.log(`T·ªïng s·ªë ·∫£nh ƒë√£ x·ª≠ l√Ω: ${totalProcessed}`);
  console.log(`T·ªïng s·ªë ·∫£nh th·∫•t b·∫°i: ${totalFailed}`);
  console.log(`T·ªïng kh√¥ng gian ti·∫øt ki·ªám: ${formatBytes(totalSavedSpace)}`);
  console.log('===============================');
}

/**
 * Chuy·ªÉn ƒë·ªïi bytes th√†nh d·∫°ng ƒë·ªçc ƒë∆∞·ª£c
 */
function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;
}

// Ch·∫°y script
main().catch(error => {
  console.error('‚ùå L·ªói khi t·ªëi ∆∞u h√≥a h√¨nh ·∫£nh:', error);
  process.exit(1);
});