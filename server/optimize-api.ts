import path from 'path';
import fs from 'fs';
import { optimizeDirectory } from './utils/image-optimizer';
import { type Express, type Request, type Response } from 'express';
import { requireAuth, requireAdmin } from './middlewares';

export function registerOptimizeRoutes(app: Express) {
  // API endpoint ƒë·ªÉ x√≥a cache
  app.post(
    "/api/admin/clear-cache",
    requireAuth,
    requireAdmin,
    async (req: Request, res: Response) => {
      try {
        // X√≥a b·ªô nh·ªõ ƒë·ªám c·ªßa h·ªá th·ªëng
        // Hi·ªán t·∫°i ch·ª©c nƒÉng n√†y ch·ªß y·∫øu ƒë·ªÉ thi·∫øt l·∫≠p c√°c header cho c√°c y√™u c·∫ßu m·ªõi
        // v√† ƒë·ªÉ client c√≥ th·ªÉ reload trang ƒë·ªÉ t·∫£i m·ªõi d·ªØ li·ªáu
        
        // Ghi log v·ªÅ vi·ªác x√≥a cache
        console.log("Y√™u c·∫ßu x√≥a cache t·ª´ qu·∫£n tr·ªã vi√™n:", req.user?.username);
        
        res.json({
          success: true,
          message: "ƒê√£ x√≥a b·ªô nh·ªõ ƒë·ªám c·ªßa h·ªá th·ªëng th√†nh c√¥ng",
          timestamp: new Date().toISOString()
        });
      } catch (error) {
        console.error('L·ªói khi x√≥a cache:', error);
        res.status(500).json({ 
          success: false, 
          error: 'L·ªói khi x√≥a b·ªô nh·ªõ ƒë·ªám',
          message: error.message 
        });
      }
    }
  );
  // API endpoint ƒë·ªÉ t·ªëi ∆∞u h√≥a ·∫£nh
  app.post(
    "/api/admin/optimize-images",
    requireAuth,
    requireAdmin,
    async (req: Request, res: Response) => {
      try {
        // Th∆∞ m·ª•c g·ªëc ch·ª©a ·∫£nh
        const uploadsDir = path.join(process.cwd(), 'uploads');
        
        console.log('====== B·∫ÆT ƒê·∫¶U T·ªêI ∆ØU H√ìA H√åNH ·∫¢NH ======');
        console.log('Th∆∞ m·ª•c g·ªëc:', uploadsDir);
        console.log('==========================================');
        
        // Danh s√°ch c√°c th∆∞ m·ª•c con c·∫ßn t·ªëi ∆∞u
        const subDirectories = [
          'events',     // ·∫¢nh s·ª± ki·ªán
          'figures',    // ·∫¢nh nh√¢n v·∫≠t l·ªãch s·ª≠ 
          'sites',      // ·∫¢nh ƒë·ªãa ƒëi·ªÉm l·ªãch s·ª≠
          'backgrounds', // ·∫¢nh n·ªÅn
          'news',       // ·∫¢nh tin t·ª©c
          'contributors', // ·∫¢nh ng∆∞·ªùi ƒë√≥ng g√≥p
          'images',      // ·∫¢nh kh√°c
          'favicons'    // Favicon
        ];
        
        let totalProcessed = 0;
        let totalFailed = 0;
        let totalSavedSpace = 0;
        let results = [];
        
        // L·∫∑p qua t·ª´ng th∆∞ m·ª•c con v√† t·ªëi ∆∞u
        for (const dir of subDirectories) {
          const dirPath = path.join(uploadsDir, dir);
          
          // Ki·ªÉm tra xem th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
          if (!fs.existsSync(dirPath)) {
            console.log(`\n‚ö†Ô∏è B·ªè qua th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: ${dir}`);
            results.push({
              directory: dir,
              status: 'skipped',
              reason: 'Directory does not exist'
            });
            continue;
          }
          
          console.log(`\nüîç ƒêang t·ªëi ∆∞u h√≥a th∆∞ m·ª•c: ${dir}`);
          
          // T·ªëi ∆∞u h√¨nh ·∫£nh trong th∆∞ m·ª•c
          const result = await optimizeDirectory(dirPath, {
            format: 'webp', // Chuy·ªÉn ƒë·ªïi sang WebP ƒë·ªÉ n√©n t·ªët h∆°n
            quality: 80,   // Ch·∫•t l∆∞·ª£ng t·ªët (80%)
            recursive: true, // X·ª≠ l√Ω c·∫£ th∆∞ m·ª•c con
            // Kh√¥ng resize ƒë·ªÉ gi·ªØ nguy√™n k√≠ch th∆∞·ªõc ·∫£nh g·ªëc
          });
          
          console.log(`\nüìä K·∫øt qu·∫£ th∆∞ m·ª•c ${dir}:`);
          console.log(`  - S·ªë ·∫£nh ƒë√£ x·ª≠ l√Ω: ${result.processed}`);
          console.log(`  - S·ªë ·∫£nh th·∫•t b·∫°i: ${result.failed}`);
          console.log(`  - Kh√¥ng gian ti·∫øt ki·ªám: ${formatBytes(result.savedSpace)}`);
          
          results.push({
            directory: dir,
            processed: result.processed,
            failed: result.failed,
            savedSpace: formatBytes(result.savedSpace),
            rawSavedSpace: result.savedSpace
          });
          
          totalProcessed += result.processed;
          totalFailed += result.failed;
          totalSavedSpace += result.savedSpace;
        }
        
        console.log('\n====== T·ªîNG K·∫æT ======');
        console.log(`T·ªïng s·ªë ·∫£nh ƒë√£ x·ª≠ l√Ω: ${totalProcessed}`);
        console.log(`T·ªïng s·ªë ·∫£nh th·∫•t b·∫°i: ${totalFailed}`);
        console.log(`T·ªïng kh√¥ng gian ti·∫øt ki·ªám: ${formatBytes(totalSavedSpace)}`);
        console.log('======================');
        
        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho client
        res.json({
          success: true,
          summary: {
            totalProcessed,
            totalFailed,
            totalSavedSpace: formatBytes(totalSavedSpace),
            rawTotalSavedSpace: totalSavedSpace
          },
          details: results
        });
        
      } catch (error) {
        console.error('L·ªói khi t·ªëi ∆∞u h√≥a ·∫£nh:', error);
        res.status(500).json({ 
          success: false, 
          error: 'L·ªói khi t·ªëi ∆∞u h√≥a ·∫£nh',
          message: error.message 
        });
      }
    }
  );

  // API endpoint ƒë·ªÉ xem th√¥ng tin v·ªÅ ·∫£nh
  app.get(
    "/api/admin/image-stats",
    requireAuth,
    requireAdmin,
    async (req: Request, res: Response) => {
      try {
        // Th∆∞ m·ª•c g·ªëc ch·ª©a ·∫£nh
        const uploadsDir = path.join(process.cwd(), 'uploads');
        
        // Danh s√°ch c√°c th∆∞ m·ª•c con c·∫ßn ki·ªÉm tra
        const subDirectories = [
          'events',     // ·∫¢nh s·ª± ki·ªán
          'figures',    // ·∫¢nh nh√¢n v·∫≠t l·ªãch s·ª≠ 
          'sites',      // ·∫¢nh ƒë·ªãa ƒëi·ªÉm l·ªãch s·ª≠
          'backgrounds', // ·∫¢nh n·ªÅn
          'news',       // ·∫¢nh tin t·ª©c
          'contributors', // ·∫¢nh ng∆∞·ªùi ƒë√≥ng g√≥p
          'images',      // ·∫¢nh kh√°c
          'favicons'    // Favicon
        ];
        
        const stats = [];
        let totalSize = 0;
        let totalFiles = 0;
        
        // L·∫∑p qua t·ª´ng th∆∞ m·ª•c con v√† l·∫•y th√¥ng tin
        for (const dir of subDirectories) {
          const dirPath = path.join(uploadsDir, dir);
          
          // Ki·ªÉm tra xem th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
          if (!fs.existsSync(dirPath)) {
            stats.push({
              directory: dir,
              exists: false,
              fileCount: 0,
              totalSize: '0 B',
              rawSize: 0
            });
            continue;
          }
          
          const { size, count } = await getDirStats(dirPath);
          totalSize += size;
          totalFiles += count;
          
          stats.push({
            directory: dir,
            exists: true,
            fileCount: count,
            totalSize: formatBytes(size),
            rawSize: size
          });
        }
        
        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho client
        res.json({
          success: true,
          summary: {
            totalDirectories: subDirectories.length,
            totalFiles,
            totalSize: formatBytes(totalSize),
            rawTotalSize: totalSize
          },
          details: stats
        });
        
      } catch (error) {
        console.error('L·ªói khi l·∫•y th√¥ng tin ·∫£nh:', error);
        res.status(500).json({ 
          success: false, 
          error: 'L·ªói khi l·∫•y th√¥ng tin ·∫£nh',
          message: error.message 
        });
      }
    }
  );
}

/**
 * L·∫•y th√¥ng tin k√≠ch th∆∞·ªõc v√† s·ªë file trong th∆∞ m·ª•c
 */
async function getDirStats(dir: string): Promise<{ size: number, count: number }> {
  let size = 0;
  let count = 0;
  
  // ƒê·ªçc t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c
  try {
    const files = await fs.promises.readdir(dir, { withFileTypes: true });
    
    for (const file of files) {
      const filePath = path.join(dir, file.name);
      
      if (file.isDirectory()) {
        // ƒê·ªá quy cho th∆∞ m·ª•c con
        const subStats = await getDirStats(filePath);
        size += subStats.size;
        count += subStats.count;
      } else {
        // L·∫•y k√≠ch th∆∞·ªõc c·ªßa file
        const stat = await fs.promises.stat(filePath);
        size += stat.size;
        count++;
      }
    }
  } catch (err) {
    console.error(`L·ªói khi ƒë·ªçc th∆∞ m·ª•c ${dir}:`, err);
  }
  
  return { size, count };
}

/**
 * Chuy·ªÉn ƒë·ªïi bytes th√†nh d·∫°ng ƒë·ªçc ƒë∆∞·ª£c
 */
function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}